Escape Analysis & Profiling Of Go Applications

Kanstantsin Shamko
Erlang developer at [[https://www.idt.net/][IDT]]

* Agenda 
- Garbage collector
- Escape analysis
- Profiling tools

* Memory Model of Golang
.image img/memmodel.png
- each goroutine has own *stack*
- *stack* represents state of execution (hold function call and their local variables)
- default stack size is 8KB. Could be resided by the Go Runtime
- *heap* holds variables (i.e. pointers, arrays, data structures) 
- garbage collector cleans *heap*  

* Garbage Collector

* Heap Before GC
.image img/gc1.jpg _ 500

* Heap After GC 
.image img/gc2.jpg _ 400
- GC locates memory blocks which have no pinters on them
- GC cleans located blocks

* Memory Usage Plot
.image img/gc3.jpg 400 _

* Garbage Collector Settings
.html img/gogc.html
- env variable
- controls the agressivness of GC
- GOGC=200 => GC cycle will start when heap grows to 200% of the prev size
- GOGC=off

* Relatively Low Memory Usage
.image img/gc4.jpg 350 _

* Large and Stable Memory Usage
.image img/gc5.jpg 400 _

* App lives for a short time
 GOGC=off go build ...

* Memory Allocation

* Types of Allocation
- stack allocation (cheap)
- heap allocation (expensive)
Go Runtime manages allocations automatically. No way to say where to allocate

* Stack Allocation
- in a local stack for each goroutine
- cheap because requires 2 CPU instructions: push to stack, release from stack
- requires that the lifetime and memory footprint of var can be determined at *compile time*

* Heap Allocation
- in a global heap for dynamic allocations
- occurs at *run time*
- expensive because:
1. it is required to search for a chunk of free memory large enough for a var
2. garbage collection

* Escape Analysis

* What Is It?
- compiler's technique to choose between 2 types of allocations
- not an optimization but can be used for that
- rules of escape analysis not a part of Go specification
- rules could be changed. make an experimentation

* Escape Example
.code example1/escape_example.go
 $ go build -gcflags '-m' ./escape_example.go
.image img/escape1.png
 $ go build -gcflags '-m -m' ./escape_example.go
.image img/escape2.png

* Main Causes of Heap Allocation 
- indirect assignment
- indirect call
- slice and map assignment
- interfaces
- ...

* Indirect Assignment 1
.code example2/assignment.go /^type x/,/^}/
.code example2/assignment.go /^func indirect/,/^}/
 $ go build -gcflags '-m -m' ./assignment.go 
.image img/indirect_assign1.png
 
* Indirect Assignment 2
.code example2/assignment.go /^func direct/,/^}/
 $ go build -gcflags '-m -m' ./assignment.go
.image img/indirect_assign2.png

* Indirect Assignment 3
.code example2/assignment_test.go /^func BenchmarkAssignmentIndirect/,/^}/
.code example2/assignment_test.go /^func BenchmarkAssignmentDirect/,/^}/
 $ go test -benchmem -run=none -bench Assignment -memprofile mem.out
.image img/indirect_assign3.png

* Indirect Assignment 4
 $ go tool pprof -alloc_space mem.out
.image img/indirect_assign4.png

* Indirect Calls
.code example3/indirect_call.go
 $ go build -gcflags '-m -m' ./indirect_call.go
.image img/indirect_call1.png 

* Map & Slice Assignment
- related to indirect assignment case
- size of a slice/map is not fixed

* Maps Assignment
.code example4/map_and_slice.go /type/,/^}/
.code example4/map_and_slice.go /BenchmarkMap/,/^}/
 $ go test -gcflags '-m -m' ./map_and_slice.go
.image img/slice_and_map1.png

* Slice Assignment 1
.code example4/map_and_slice.go /BenchmarkSlice/,/^}/
 $ go test -gcflags '-m -m' ./map_and_slice.go
.image img/slice_and_map2.png

* Slice Assignment 2 
Not about escape analysis
.code example4/append.go
.image img/slice_and_map3.png

* Interfaces
- can't define exact type at compile time
- good idea to use code generation (i.e. easyjson)

* Profiling Tools

* Quick List
- go test framework (benchmarks)
- pprof (mem usage, cpu utilisation, goroutine traces, etc.. )
- benchstat

* Conclusion
- avoid premature optimization
- don't guess but measure
- more likely, performance problems caused by heap allocations

* Links
- https://docs.google.com/document/d/1CxgUBPlx9iJzkz9JWkb6tIpTe5q32QDmz8l0BouG0Cw/edit#heading=h.llaiaboyeyo3
- https://github.com/kshamko/allocations_talk
